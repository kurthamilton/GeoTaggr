@page "/countries"
@inherits GtgrPage
@using GeoTaggr.Core.Countries
@using GeoTaggr.Services.Countries
@using GeoTaggr.Web.Components.Shared.Grids
@using GeoTaggr.Web.Components.Shared.Layout

@if (Countries == null)
{
    return;
}

<GtgrWidgetContainer>
    <CountryFilter OnChange="@OnFiltersChanged">
    </CountryFilter>
</GtgrWidgetContainer>

<GtgrGrid Cols="2" ColsSm="3" ColsMd="4" ColsLg="5">
    @foreach (Country country in Countries)
    {
        <GtgrGridItem>
            <CountryCard 
                Country="@country"
                OnInclude="@OnCountryIncluded">
            </CountryCard>
        </GtgrGridItem>        
    }
</GtgrGrid>


@inject ICountryService CountryService
@code {
    private IReadOnlyCollection<Country>? Countries { get; set; }    

    private CountryFilterValues Filter { get; set; } = new CountryFilterValues();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadCountriesAsync();
    }

    private async Task LoadCountriesAsync()
    {
        Countries = null;
        Countries = await CountryService.GetCountriesAsync(Filter);
    }

    private async Task OnCountryIncluded(Country? country)
    {
        if (country == null)
        {
            return;
        }

        await CountryService.IncludeCountryAsync(country.CountryId);
        country.HasCoverage = true;
    }

    private async Task OnFiltersChanged(CountryFilterValues filter)
    {
        Filter = filter;
        await LoadCountriesAsync();
    }
}
