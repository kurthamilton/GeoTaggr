@inherits GtgrComponentBase
@using GeoTaggr.Core.Countries
@using GeoTaggr.Core.Maps
@using GeoTaggr.Core.Tags
@using GeoTaggr.Services
@using GeoTaggr.Services.Maps
@using GeoTaggr.Services.Tags
@using GeoTaggr.Web.Components.Shared.Buttons
@using GeoTaggr.Web.Components.Shared.Cards
@using GeoTaggr.Web.Components.Shared.Dropdowns
@using GeoTaggr.Web.Components.Shared.Forms
@using GeoTaggr.Web.Components.Shared.Forms.Inputs
@using GeoTaggr.Web.Components.Shared.Forms.Selects
@using GeoTaggr.Web.Components.Shared.Grids

<GtgrCard>
    <Header>
        Create new tag
    </Header>
    <Content>
        <GtgrForm Model="@Model" OnSubmit="@OnSubmitted">
            @if (CountryOptions != null)
            {        
                <GtgrFormGroup>
                    <GtgrSelect
                        Label="Country"
                        Required="true"
                        Options="@CountryOptions"
                        Value="@SelectedCountry"
                        OnChange="@OnCountrySelected"
                        For="@(() => Model.Country)">
                    </GtgrSelect>
                </GtgrFormGroup>
            }    

            <GtgrFormGroup>           
                <GtgrTextInput
                    Label="Name"
                    For="@(() => Model.Name)"
                    @bind-Value="@Model.Name"
                    Required="true"
                    AutocompleteOptions="@TagNames">
                </GtgrTextInput>       
            </GtgrFormGroup>

            <GtgrFormGroup>
                <GtgrTextInput
                    Label="Value"
                    For="@(() => Model.Value)"
                    @bind-Value="@Model.Value"
                    Required="true">
                </GtgrTextInput>
            </GtgrFormGroup>

            <GtgrFormGroup>
                <GtgrTextInput
                    Label="Url"
                    For="@(() => Model.Url)"                  
                    HelpText="Use the Google Maps streetview URL"
                    Value="@Model.Url"
                    ValueChanged="@OnUrlChanged">
                </GtgrTextInput>
            </GtgrFormGroup>

            <GtgrGrid ColsSm="2">
                <GtgrGridItem>
                    <GtgrFormGroup>
                        <GtgrNumberInput 
                            T="double?"
                            Label="Lat"
                            For="@(() => Model.Lat)"
                            @bind-Value="@Model.Lat">
                        </GtgrNumberInput>
                    </GtgrFormGroup>
                </GtgrGridItem>
                <GtgrGridItem>
                    <GtgrFormGroup>
                        <GtgrNumberInput 
                            T="double?"
                            Label="Long"
                            For="@(() => Model.Long)"
                            @bind-Value="@Model.Long">
                        </GtgrNumberInput>
                    </GtgrFormGroup>
                </GtgrGridItem>
            </GtgrGrid>

            <GtgrFormGroup>
                <GtgrButton
                    Type="GtgrButtonType.Primary"
                    Submit="true">
                    Add
                </GtgrButton>
            </GtgrFormGroup>
        </GtgrForm>
    </Content>
</GtgrCard>

@inject IJSRuntime JSRuntime
@inject IMapService MapService
@inject ITagService TagService
@code {
    [Parameter]
    public IReadOnlyDictionary<int, Country>? Countries { get; set; }

    [Parameter]
    public IReadOnlyCollection<SelectOption>? CountryOptions { get; set; }

    [Parameter]
    public EventCallback OnTagCreated { get; set; }

    [Parameter]
    public IReadOnlyCollection<Tag>? Tags { get; set; }

    [Parameter]
    public int? UserId { get; set; }

    private CreateTagFormModel Model { get; set; } = new();

    private string? SelectedCountry { get; set; }

    private IReadOnlyCollection<string>? TagNames => Tags
        ?.Select(x => x.Name)
        .Distinct(StringComparer.InvariantCultureIgnoreCase)
        .OrderBy(x => x)
        .ToArray();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void OnCountrySelected(SelectOption? option)
    {        
        Model.Country = option;
        SelectedCountry = option?.Key;
    }

    private async Task OnSubmitted()
    {
        if (UserId == null)
        {
            await ShowMessageAsync("Not logged in");
            return;
        }

        TagInput input = new TagInput
        {
            CountryId = int.Parse(Model.Country?.Key ?? ""),
            Name = Model.Name,
            Value = Model.Value,
            Lat = Model.Lat,
            Long = Model.Long,
            Url = Model.Url
        };        

        ServiceResult result = await TagService.AddTagAsync(input, UserId.Value);
        await ShowMessageAsync(result.Message);
        if (!result.Success)
        {            
            return;
        }

        ResetForm();
        await OnTagCreated.InvokeAsync();
    }

    private async Task OnUrlChanged(string? url)
    {
        Model.Url = url;

        if (!MapService.TryParseLocation(url, out Coordinates? coordinates))
        {
            return;            
        }

        Model.Lat = coordinates.Lat;
        Model.Long = coordinates.Long;

        string countryCode = await JSRuntime
            .InvokeAsync<string>("gtgr.maps.getCountryCode", new { lat = Model.Lat, @long = Model.Long });
        Country? country = Countries
            ?.Values
            .FirstOrDefault(x => string.Equals(x.IsoCode2, countryCode, StringComparison.InvariantCultureIgnoreCase));
        if (country == null)
        {
            return;            
        }

        SelectedCountry = country.CountryId.ToString();
        Model.Country = CountryOptions
            ?.FirstOrDefault(x => x.Key == country.CountryId.ToString());
        await InvokeAsync(StateHasChanged);
    }

    private void ResetForm()
    {
        Model = new();
        SelectedCountry = null;
        InvokeAsync(StateHasChanged);
    }
}
