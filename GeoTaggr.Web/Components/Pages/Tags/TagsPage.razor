@attribute [Route(GtgrRoutes.Tags)]
@inherits GtgrPage
@using GeoTaggr.Core.Countries
@using GeoTaggr.Core.Tags
@using GeoTaggr.Data.Tags
@using GeoTaggr.Services
@using GeoTaggr.Services.Countries
@using GeoTaggr.Services.Tags
@using GeoTaggr.Web.Components.Shared.Forms.Selects
@using GeoTaggr.Web.Components.Shared.Maps

@if (Tags == null)
{
    return;
}

<GtgrWidgetContainer>
    <MudGrid>
    <MudItem xs="12" md="9">
        <GtgrMap Markers="@MapMarkers"></GtgrMap>
    </MudItem>
    <MudItem xs="12" md="3">
        <CreateTagForm
            Countries="@Countries"
            CountryOptions="@CountryOptions"
            OnTagCreated="@OnTagCreated"
            TagNames="@TagNames">
        </CreateTagForm>
    </MudItem>
</MudGrid>
</GtgrWidgetContainer>

<GtgrWidgetContainer>
    <TagsTable
        Countries="@Countries"
        OnDelete="@OnTagDelete"
        Tags="@Tags">
    </TagsTable>
</GtgrWidgetContainer>

@inject ICountryService CountryService
@inject ITagService TagService
@code {
    private IReadOnlyDictionary<int, Country>? Countries { get; set; }

    private IReadOnlyCollection<SelectOption>? CountryOptions { get; set; }

    private IReadOnlyCollection<GtgrMapMarker>? MapMarkers { get; set; }

    private IReadOnlyCollection<string>? TagNames { get; set; }

    private IReadOnlyCollection<Tag>? Tags { get; set; }    

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadCountriesAsync();
        await LoadTagsAsync();
    }

    private async Task LoadCountriesAsync()
    {
        CountryOptions = null;
        Countries = await CountryService.GetCountryDictionaryAsync(new CountryFilterValues
        {
            IncludeNoCoverage = false
        });

        CountryOptions = Countries
            .Values
            .Select(x => new SelectOption(x.CountryId.ToString(), x.Name))
            .OrderBy(x => x.Text)
            .ToArray();
    }

    private async Task LoadTagsAsync()
    {
        MapMarkers = null;
        Tags = null;
        if (UserId == null)
        {
            return;
        }

        Tags = await TagService.GetTagsAsync(new TagFilter(UserId.Value));
        TagNames = Tags
            .Select(x => x.Name)
            .Distinct(StringComparer.InvariantCultureIgnoreCase)
            .OrderBy(x => x)
            .ToArray();
        MapMarkers = Tags
            .Where(x => x.Location != null)
            .Select(x => new GtgrMapMarker(x.Lat ?? 0, x.Long ?? 0))
            .ToArray();
    }

    private async Task OnTagDelete(int tagId)
    {
        if (UserId == null)
        {
            return;
        }

        ServiceResult result = await TagService.DeleteTagAsync(tagId, UserId.Value);
        if (result.Success)
        {
            await LoadTagsAsync();
        }
    }

    private async Task OnTagCreated()
    {
        await LoadTagsAsync();
    }
}
