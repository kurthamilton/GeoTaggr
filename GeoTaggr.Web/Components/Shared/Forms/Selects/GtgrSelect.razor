@inherits GtgrFormComponentBase
@using GeoTaggr.Web.Components.Shared.Dropdowns

@if (Options == null)
{
    return;
}

<MudAutocomplete 
    T="SelectOption" 
    Label="@Label"     
    Required="@Required" 
    SearchFunc="@SearchAsync"
    Value="@SelectedOption"
    ValueChanged="@OnOptionSelected">
    @foreach (SelectOption option in Options)
    {
        <MudSelectItem 
            Value="@option">
        </MudSelectItem>
    }
</MudAutocomplete>

@code {
    [Parameter]
    public EventCallback<string?> OnChange { get; set; }

    [Parameter]
    public IReadOnlyCollection<SelectOption>? Options { get; set; }

    [Parameter]
    public string? Value { get; set; }

    private SelectOption? SelectedOption { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Options != null && !string.IsNullOrEmpty(Value))
        {
            SelectOption? option = Options
                ?.FirstOrDefault(x => x.Key.Equals(Value, StringComparison.InvariantCultureIgnoreCase));
            if (option != null)
            {
                SelectedOption = option;
            }
        }
    }

    private Task OnOptionSelected(SelectOption? option)
    {
        SelectedOption = option;
        return Task.CompletedTask;
    }

    private async Task OnSelectChange(ChangeEventArgs e)
    {
        string? value = e.Value?.ToString();
        await OnChange.InvokeAsync(value);
    }

    private IEnumerable<SelectOption> Search(string? value)
    {
        if (Options == null)
        {
            return Enumerable.Empty<SelectOption>();
        }

        if (string.IsNullOrEmpty(value))
        {
            return Options;
        }

        return Options
            .Where(x => x.Text.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private Task<IEnumerable<SelectOption>> SearchAsync(string? value)
    {
        IEnumerable<SelectOption> options = Search(value);
        return Task.FromResult(options);
    }
}
